"use client";

import { useState } from "react";
import { useForm, FieldValues, SubmitHandler } from "react-hook-form";
import { Button } from "./ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "sonner";
import MultiImageUploader, { ImageUpload } from "@/components/multi-image-uploader";
import { auth, storage } from "@/firebase/client";
import { signInAnonymously } from "firebase/auth";
import { ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";
import { submitManForm } from "@/lib/actions/man";

interface ManFormSOTProps {
  bu: string;
  type: string;
  id: string;
  isInDialog?: boolean;
}

interface SOTFormData extends FieldValues {
  report: 'sot' | 'vfl' | '';
  area: string;
  talkwith: string;
  topics: string[];
  safe?: string;
  care?: string;
  riskLevel: 'low' | 'medium' | 'high' | '';
  actionComment?: string;
  remark?: string;
  [key: string]: any;
}

export default function ManFormSOT({ bu, type, id, isInDialog = false }: ManFormSOTProps) {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
    watch,
    setValue,
  } = useForm<SOTFormData>();

  const [images, setImages] = useState<ImageUpload[]>([]);
  const [selectedSafetyIssues, setSelectedSafetyIssues] = useState<string[]>([]);

  // Watch form values
  const report = watch('report');
  const riskLevel = watch('riskLevel');

  // Safety issue categories with colors matching the screenshot
  const safetyIssueCategories = [
    { id: 'ppe', label: '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• (PPE)', color: 'bg-blue-500' },
    { id: 'workingAtHight', label: '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á (Working at Height)', color: 'bg-red-500' },
    { id: 'isolation', label: '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô (Isolation of plant and equipment)', color: 'bg-orange-500' },
    { id: 'vehicles', label: '‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£ (Vehicles and Traffic Safety)', color: 'bg-yellow-500' },
    { id: 'electrical', label: '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ (Electrical Safety)', color: 'bg-yellow-400' },
    { id: 'guarding', label: '‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ (Machine Guarding)', color: 'bg-green-500' },
    { id: 'hotwork', label: '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏¢‡πÑ‡∏ü (Hot Work and Permits)', color: 'bg-teal-500' },
    { id: 'lifting', label: '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏¢‡∏Å (Lifting Equipment)', color: 'bg-blue-600' },
    { id: 'quarries', label: '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏á (Quarries)', color: 'bg-indigo-500' },
    { id: 'hotMaterials', label: '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô (Hot Materials)', color: 'bg-purple-500' },
    { id: 'csm', label: '‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤ (Contractor Management)', color: 'bg-pink-500' },
    { id: 'equipment', label: '‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ (Portable Equipment)', color: 'bg-purple-400' },
    { id: 'generalWork', label: '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (General Work Permits)', color: 'bg-gray-500' },
  ];

  // Handle safety issue selection
  const handleSafetyIssueToggle = (issueId: string) => {
    setSelectedSafetyIssues(prev => {
      const updated = prev.includes(issueId)
        ? prev.filter(id => id !== issueId)
        : [...prev, issueId];
      setValue('topics', updated);
      return updated;
    });
  };


  const onSubmit: SubmitHandler<SOTFormData> = async (formData) => {
    try {
      // Validate required fields
      if (!formData.report) {
        toast.error("Please select a reporting type (SOT or VFL)");
        return;
      }

      if (!formData.area || !formData.talkwith) {
        toast.error("Please fill in all required fields");
        return;
      }

      if (selectedSafetyIssues.length === 0) {
        toast.error("Please select at least one safety issue category");
        return;
      }

      if (!formData.riskLevel) {
        toast.error("Please select a risk level");
        return;
      }

      // Authenticate anonymously if not already authenticated (for Storage upload)
      if (!auth.currentUser) {
        try {
          await signInAnonymously(auth);
        } catch (authError: any) {
          console.error("Authentication error:", authError);
          toast.error("Authentication failed. Please try again.");
          return;
        }
      }

      // Upload images to Firebase Storage and get download URLs
      const imageUrls: string[] = [];

      for (let index = 0; index < images.length; index++) {
        const image = images[index];
        if (image.file) {
          try {
            const path = `Man/${bu}/${type}/${id}/${Date.now()}-${index}-${image.file.name}`;
            const storageRef = ref(storage, path);

            // Upload file and wait for completion
            const uploadTask = uploadBytesResumable(storageRef, image.file);
            await uploadTask;

            // Get download URL after upload completes
            const downloadURL = await getDownloadURL(storageRef);
            imageUrls.push(downloadURL);
          } catch (uploadError) {
            console.error(`Upload error for image ${index}:`, uploadError);
            toast.error(`Failed to upload image ${index + 1}. Please try again.`);
            return;
          }
        }
      }

      const sotData = {
        ...formData,
        topics: selectedSafetyIssues,
        bu,
        type: type.toLowerCase(),
        id,
        images: imageUrls,
        timestamp: new Date().toISOString(),
      };

      // Save to Firestore using server action
      try {
        const result = await submitManForm(sotData);

        if (result.success) {
          toast.success("SOT/VFL report submitted successfully!");
          reset();
          setSelectedSafetyIssues([]);
          setImages([]);

          // Scroll to top and optionally reload
          window.scrollTo(0, 0);
        } else {
          toast.error(result.error || "Failed to submit SOT/VFL report");
        }
      } catch (serverError) {
        console.error("Server action error:", serverError);
        toast.error("Failed to save SOT/VFL report. Please try again.");
      }
    } catch (error) {
      console.error("General error:", error);
      toast.error("An unexpected error occurred. Please try again.");
    }
  };

  // Get risk level color
  const getRiskLevelColor = (level: string) => {
    switch (level) {
      case 'low': return 'bg-green-500 hover:bg-green-700';
      case 'medium': return 'bg-orange-500 hover:bg-orange-700';
      case 'high': return 'bg-red-500 hover:bg-red-700';
      default: return 'bg-gray-300 hover:bg-gray-400';
    }
  };

  return (
    <div>
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="text-center text-xl font-bold text-gray-800">
            üõ°Ô∏è ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° SOT and VFL
          </CardTitle>
        </CardHeader>
      </Card>

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        {/* Reporting Type Selection */}
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-4">
              <Label className="text-lg font-semibold text-gray-800">
                1. ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ / Please select your reporting type today. *
              </Label>
              <div className="flex flex-col space-y-3">
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    value="sot"
                    {...register('report', { required: 'Please select a reporting type' })}
                    className="sr-only"
                  />
                  <div className={`px-4 py-2 rounded-full text-white font-medium text-sm transition-colors ${
                    report === 'sot' ? 'bg-red-500 ring-2 ring-offset-2 ring-gray-400' : 'bg-gray-400 hover:bg-red-400'
                  }`}>
                    Safety Observation Tour (SOT)
                  </div>
                </label>
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    value="vfl"
                    {...register('report', { required: 'Please select a reporting type' })}
                    className="sr-only"
                  />
                  <div className={`px-4 py-2 rounded-full text-white font-medium text-sm transition-colors ${
                    report === 'vfl' ? 'bg-red-500 ring-2 ring-offset-2 ring-gray-400' : 'bg-gray-400 hover:bg-red-400'
                  }`}>
                    Visible Felt Leadership (VFL)
                  </div>
                </label>
              </div>
              {errors.report && (
                <p className="text-red-500 text-sm">{errors.report.message}</p>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Area/Location Field */}
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-2">
              <Label htmlFor="area" className="text-lg font-semibold">
                2. ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ / Area or Location for observing *
              </Label>
              <Input
                {...register("area", { required: "Area is required" })}
                placeholder="Enter area or location"
                className="w-full"
              />
              {errors.area && (
                <p className="text-red-500 text-sm">{errors.area.message}</p>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Observer Name Field */}
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-2">
              <Label htmlFor="talkwith" className="text-lg font-semibold">
                3. ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏∏‡∏¢‡∏î‡πâ‡∏ß‡∏¢ / Observer's name *
              </Label>
              <Input
                {...register("talkwith", { required: "Observer name is required" })}
                placeholder="Enter observer name"
                className="w-full"
              />
              {errors.talkwith && (
                <p className="text-red-500 text-sm">{errors.talkwith.message}</p>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Safety Issues Categories */}
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-4">
              <Label className="text-lg font-semibold text-gray-800">
                4. ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö / The safety issues that you have observed *
              </Label>
              <div className="grid grid-cols-1 gap-3">
                {safetyIssueCategories.map((category) => (
                  <button
                    key={category.id}
                    type="button"
                    onClick={() => handleSafetyIssueToggle(category.id)}
                    className={`px-3 py-2 rounded-md text-white text-sm font-medium transition-all ${
                      selectedSafetyIssues.includes(category.id)
                        ? `${category.color} opacity-100 ring-2 ring-offset-2 ring-gray-400`
                        : `${category.color} opacity-50 hover:opacity-90`
                    }`}
                  >
                    {category.label}
                  </button>
                ))}
              </div>
              {selectedSafetyIssues.length === 0 && (
                <p className="text-red-500 text-sm">Please select at least one safety issue category</p>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Positive Reinforcement */}
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-2">
              <Label className="text-lg font-semibold">
                5. ‡∏Å‡∏≤‡∏£‡∏ä‡∏°‡πÄ‡∏ä‡∏¢: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥/‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (Positive reinforcement: Safe Action or Safe Condition)
              </Label>
              <Textarea
                {...register("safe")}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î..."
                className="w-full min-h-[80px]"
              />
            </div>
          </CardContent>
        </Card>

        {/* Safety Care */}
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-2">
              <Label className="text-lg font-semibold">
                6. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡πà‡∏ß‡∏á‡πÉ‡∏¢: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥/‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (Safety care : Unsafe Action or Unsafe Condition) ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠ (Agreement) ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
              </Label>
              <div className="text-sm text-gray-600 mb-2">‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡πÉ‡∏à‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (Agreement) ‡∏ß‡∏≤‡∏°‡πÉ‡∏™</div>
              <Textarea
                {...register("care")}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î..."
                className="w-full min-h-[80px]"
              />
            </div>
          </CardContent>
        </Card>

        {/* Risk Level */}
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-4">
              <Label className="text-lg font-semibold">
                7. ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á / Risk Level *
              </Label>
              <div className="flex flex-col space-y-3">
                <button
                  type="button"
                  onClick={() => setValue('riskLevel', 'low')}
                  className={`px-4 py-2 rounded-md text-white font-medium text-sm transition-colors ${
                    riskLevel === 'low' ? 'bg-green-500 ring-2 ring-offset-2 ring-gray-400' : 'bg-green-400 hover:bg-green-500'
                  }`}
                >
                  ‡∏ï‡πà‡∏≥ (Low) - ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á (Low probability of occurrence with no significant impact)
                </button>
                <button
                  type="button"
                  onClick={() => setValue('riskLevel', 'medium')}
                  className={`px-4 py-2 rounded-md text-white font-medium text-sm transition-colors ${
                    riskLevel === 'medium' ? 'bg-orange-500 ring-2 ring-offset-2 ring-gray-400' : 'bg-orange-400 hover:bg-orange-500'
                  }`}
                >
                  ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Medium) - ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (Moderate probability of occurrence that may impact safety)
                </button>
                <button
                  type="button"
                  onClick={() => setValue('riskLevel', 'high')}
                  className={`px-4 py-2 rounded-md text-white font-medium text-sm transition-colors ${
                    riskLevel === 'high' ? 'bg-red-500 ring-2 ring-offset-2 ring-gray-400' : 'bg-red-400 hover:bg-red-500'
                  }`}
                >
                  ‡∏™‡∏π‡∏á (High) - ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏ú‡∏•‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á (High risk of accidents or severe consequences)
                </button>
              </div>
              {!riskLevel && (
                <p className="text-red-500 text-sm">Please select a risk level</p>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Process Comments */}
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-2">
              <Label className="text-lg font-semibold">
                8. ‡∏°‡∏≤‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ / Process of action or General Comments.
              </Label>
              <Textarea
                {...register("actionComment")}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î..."
                className="w-full min-h-[80px]"
              />
            </div>
          </CardContent>
        </Card>

        {/* Image Upload */}
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-4">
              <Label className="text-lg font-semibold">
                ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö (Attach Image) (Optional)
              </Label>
              <MultiImageUploader
                images={images}
                onImagesChange={setImages}
                urlFormatter={(image) => {
                  if (!image.file) {
                    return `https://firebasestorage.googleapis.com/v0/b/sccc-inseesafety-prod.firebasestorage.app/o/${encodeURIComponent(
                      image.url
                    )}?alt=media`;
                  }
                  return image.url;
                }}
                compressionType="general"
              />
            </div>
          </CardContent>
        </Card>

        {/* Remark */}
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-2">
              <Label className="text-lg font-semibold">
                ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (Remark) (Optional)
              </Label>
              <Textarea
                {...register("remark")}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏..."
                className="w-full min-h-[60px]"
              />
            </div>
          </CardContent>
        </Card>

        {/* Submit Button */}
        <Button
          type="submit"
          disabled={isSubmitting}
          className="w-full bg-purple-600 hover:bg-purple-700 text-white font-semibold py-4 px-6 rounded-md shadow-lg text-lg"
        >
          {isSubmitting ? "Submitting..." : "‡∏™‡πà‡∏á / Submit"}
        </Button>
      </form>
    </div>
  );
}